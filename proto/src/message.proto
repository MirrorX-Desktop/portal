syntax = "proto3";

package message;

message RegisterRequest {
  optional sfixed64 device_id = 1;
  string device_finger_print = 2;
}

message RegisterResponse {
  string domain = 1;
  sfixed64 device_id = 2;
  sfixed64 expire = 3;
}

enum ResourceType {
  RESOURCE_TYPE_DESKTOP = 0;
  RESOURCE_TYPE_FILES = 1;
}

message VisitRequest {
  string domain = 1;
  sfixed64 active_device_id = 2;
  sfixed64 passive_device_id = 3;
  ResourceType resource_type = 4;
}

message VisitResponse {
  string domain = 1;
  bool allow = 2;
}

message VisitReplyRequest {
  string domain = 1;
  sfixed64 active_device_id = 2;
  sfixed64 passive_device_id = 3;
  bool allow = 4;
}

message VisitReplyResponse {}

message KeyExchangeRequest {
  string domain = 1;
  sfixed64 active_device_id = 2;
  sfixed64 passive_device_id = 3;
  bytes password_salt = 4;
  bytes secret = 5;
  bytes secret_nonce = 6;
}

message KeyExchangeResponse {
  string domain = 1;
  sfixed64 active_device_id = 2;
  sfixed64 passive_device_id = 3;
  KeyExchangeResult key_exchange_result = 4;
}

enum KeyExchangeReplyError {
  KEY_EXCHANGE_REPLY_ERROR_INTERNAL = 0;
  KEY_EXCHANGE_REPLY_ERROR_INVALID_ARGS = 1;
  KEY_EXCHANGE_REPLY_ERROR_INVALID_PASSWORD = 2;
}

message KeyExchangeResult {
  oneof inner_key_exchange_result {
    KeyExchangeReplyError error = 1;
    bytes secret = 2;
  }
}

message KeyExchangeReplyRequest {
  string domain = 1;
  sfixed64 active_device_id = 2;
  sfixed64 passive_device_id = 3;
  KeyExchangeResult key_exchange_result = 4;
}

message KeyExchangeReplyResponse {}

message KeyExchangeActiveDeviceSecret {
  bytes exchange_reply_public_key_n = 1;
  bytes exchange_reply_public_key_e = 2;
  bytes active_exchange_public_key = 3;
  bytes active_exchange_nonce = 4;
  string visit_credentials = 5;
}

message KeyExchangePassiveDeviceSecret {
  bytes passive_exchange_public_key = 1;
  bytes passive_exchange_nonce = 2;
}

message SubscribeRequest {
  sfixed64 device_id = 1;
  string device_finger_print = 2;
}

message PublishMessage {
  oneof inner_publish_message {
    VisitRequest visit_request = 1;
    KeyExchangeRequest key_exchange_request = 2;
  }
}