syntax = "proto3";

package signaling;

service Signaling {
    rpc Register (RegisterRequest) returns (RegisterResponse) {}
    rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse) {}
    rpc Visit (VisitRequest) returns (VisitResponse) {}
    rpc VisitReply (VisitReplyRequest) returns (VisitReplyResponse) {}
    rpc KeyExchange (KeyExchangeRequest) returns (KeyExchangeResponse) {}
    rpc KeyExchangeReply (KeyExchangeReplyRequest)
            returns (KeyExchangeReplyResponse) {}
    rpc Subscribe (SubscribeRequest) returns (stream PublishMessage) {}
}

message RegisterRequest {
    optional fixed64 device_id = 1;
    string device_finger_print = 2;
}

message RegisterResponse {fixed64 device_id = 1;sfixed64 expire = 2;}

message HeartbeatRequest {
    fixed64 local_device_id = 1;
    fixed32 timestamp = 2;
}

message HeartbeatResponse {fixed32 timestamp = 1;}

enum ResourceType {
    RESOURCE_TYPE_DESKTOP = 0;
    RESOURCE_TYPE_FILES = 1;
}

message VisitRequest {
    fixed64 active_device_id = 1;
    fixed64 passive_device_id = 2;
    ResourceType resource_type = 3;
}

message VisitResponse {bool allow = 1;}

message VisitReplyRequest {
    fixed64 active_device_id = 1;
    fixed64 passive_device_id = 2;
    bool allow = 3;
}

message VisitReplyResponse {}

message KeyExchangeRequest {
    fixed64 active_device_id = 1;
    fixed64 passive_device_id = 2;
    bytes password_salt = 3;
    bytes secret = 4;
    bytes secret_nonce = 5;
}

message KeyExchangeResponse {
    fixed64 active_device_id = 1;
    fixed64 passive_device_id = 2;
    bytes secret = 3;
}

enum KeyExchangeReplyError {
    KEY_EXCHANGE_REPLY_ERROR_INTERNAL = 0;
    KEY_EXCHANGE_REPLY_ERROR_INVALID_ARGS = 1;
    KEY_EXCHANGE_REPLY_ERROR_INVALID_PASSWORD = 2;
}

message KeyExchangeReplyRequest {
    fixed64 active_device_id = 1;
    fixed64 passive_device_id = 2;
    oneof key_exchange_reply {
        KeyExchangeReplyError error = 3;
        bytes secret = 4;
    }
}

message KeyExchangeReplyResponse {}

message KeyExchangeActiveDeviceSecret {
    bytes exchange_reply_public_key_n = 1;
    bytes exchange_reply_public_key_e = 2;
    bytes active_exchange_public_key = 3;
    bytes active_exchange_nonce = 4;
    string visit_credentials = 5;
}

message KeyExchangePassiveDeviceSecret {
    bytes passive_exchange_public_key = 1;
    bytes passive_exchange_nonce = 2;
}

message SubscribeRequest {
    fixed64 device_id = 1;
    fixed64 device_finger_print = 2;
}

message PublishMessage {
    oneof inner {
        VisitRequest visit_request = 1;
        KeyExchangeRequest key_exchange_request = 2;
    }
}