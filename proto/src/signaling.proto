syntax = "proto3";

package signaling;

service Signaling {
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
  rpc Visit(VisitRequest) returns (VisitResponse) {}
  rpc VisitReply(VisitReplyRequest) returns (VisitReplyResponse) {}
  rpc KeyExchange(KeyExchangeRequest) returns (KeyExchangeResponse) {}
  rpc KeyExchangeReply(KeyExchangeReplyRequest)
      returns (KeyExchangeReplyResponse) {}
  rpc Subscribe(SubscribeRequest) returns (stream PublishMessage) {}
}

message RegisterRequest {
  optional string device_id = 1;
  string device_finger_print = 2;
}

message RegisterResponse { string device_id = 1; }

message HeartbeatRequest {
  string local_device_id = 1;
  fixed32 timestamp = 2;
}

message HeartbeatResponse { fixed32 timestamp = 1; }

enum ResourceType {
  desktop = 0;
  files = 1;
}

message VisitRequest {
  string active_device_id = 1;
  string passive_device_id = 2;
  ResourceType resource_type = 3;
}

message VisitResponse { bool allow = 1; }

message VisitReplyRequest {
  string active_device_id = 1;
  string passive_device_id = 2;
  bool allow = 3;
}

message VisitReplyResponse {}

message KeyExchangeRequest {
  string active_device_id = 1;
  string passive_device_id = 2;
  bytes password_salt = 3;
  bytes secret = 4;
  bytes secret_nonce = 5;
}

message KeyExchangeResponse {
  string active_device_id = 1;
  string passive_device_id = 2;
  bytes secret = 3;
}

enum KeyExchangeReplyError {
  internal = 0;
  invalid_args = 1;
  invalid_password = 2;
}

message KeyExchangeReplyRequest {
  string active_device_id = 1;
  string passive_device_id = 2;
  oneof key_exchange_reply {
    KeyExchangeReplyError error = 3;
    bytes secret = 4;
  }
}

message KeyExchangeReplyResponse {}

message KeyExchangeActiveDeviceSecret {
  bytes exchange_reply_public_key_n = 1;
  bytes exchange_reply_public_key_e = 2;
  bytes active_exchange_public_key = 3;
  bytes active_exchange_nonce = 4;
  string visit_credentials = 5;
}

message KeyExchangePassiveDeviceSecret {
  bytes passive_exchange_public_key = 1;
  bytes passive_exchange_nonce = 2;
}

message SubscribeRequest {
  string device_id = 1;
  string device_finger_print = 2;
}

message PublishMessage {
  oneof inner {
    VisitRequest visit_request = 1;
    KeyExchangeRequest key_exchange_request = 2;
  }
}